name: Android Build ## name of the workflow

on:
  workflow_dispatch: # To trigger manual build
  release:
    types: [published] # only run the workflow when a new release has been published

jobs:
  android-build:
    name: Android Build
    # runs-on: [self-hosted, macOS] # using ubuntu latest version / or you can use a specific version
    runs-on: ubuntu-latest # using ubuntu latest version / or you can use a specific version

    steps:
      - name: Check out Git repository # clone the repo to local ci workspace
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # - name: set up JDK 11
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: '11'
      #     distribution: 'temurin'
      #     cache: gradle

      #       - name: Copy Key
      #         run: echo "${{ secrets.ANDROID_SIGNING_KEY }}" | base64 -d > android/upload_keystore.jks
      #       - name: Make secrets
      #         run: echo "${{ secrets.KEY_PROPERTIES }}" | base64 -d > android/key.properties

      #       - run: echo "$(ls)"
      #       - run: echo "$pwd"
      #       - run: cat android/key.properties
      #       - run: echo "$(ls android)"

      # - name: Get yarn cache directory path
      #   id: yarn-cache-dir-path
      #   run: echo "::set-output name=dir::$(yarn cache dir)"
      # - name: Restore node_modules from cache
      #   uses: actions/cache@v2
      #   id: yarn-cache
      #   with:
      #     path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-

      # - name: Install dependencies # install project deps with --frozen-lockfile to make sure we will have the same packages version ( very recommended  on running yarn install on ci)
      #   run: yarn install --frozen-lockfile

      # configure cash for gradle : will help to reduce build time
      # - name: Cache Gradle Wrapper
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.gradle/wrapper
      #     key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

      # - name: Cache Gradle Dependencies
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.gradle/caches
      #     key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
      #     restore-keys: |
      #       ${{ runner.os }}-gradle-caches-
      # - name: Make Gradlew Executable
      #   run: cd android && chmod +x ./gradlew

      # - name: Make Custom Script Executable
      #   run: chmod +x ./script.sh

  increment-major:
    name: Increment Major
    # runs-on: [self-hosted, macOS] # using ubuntu latest version / or you can use a specific version
    runs-on: ubuntu-latest # using ubuntu latest version / or you can use a specific version
    needs: android-build
    if: "contains(github.event.head_commit.message, '[major update]')"

    steps:
      - name: Check out Git repository # clone the repo to local ci workspace
        uses: actions/checkout@v3

      - name: Make Custom Script Executable
        run: chmod +x ./script.sh

      - name: Run Major Update
        run: ./script.sh increase-app-version major

  increment-minor:
    name: Increment Minor
    # runs-on: [self-hosted, macOS] # using ubuntu latest version / or you can use a specific version
    runs-on: ubuntu-latest # using ubuntu latest version / or you can use a specific version
    needs: android-build
    if: "contains(github.event.head_commit.message, '[minor update]')"

    steps:
      - name: Check out Git repository # clone the repo to local ci workspace
        uses: actions/checkout@v3

      - name: Make Custom Script Executable
        run: chmod +x ./script.sh

      - name: Run Minor Update
        run: ./script.sh increase-app-version minor

  increment-patch:
    name: Increment Patch
    # runs-on: [self-hosted, macOS] # using ubuntu latest version / or you can use a specific version
    runs-on: ubuntu-latest # using ubuntu latest version / or you can use a specific version
    needs: android-build
    if: "!contains(github.event.head_commit.message, 'patch')"

    steps:
      - name: Check out Git repository # clone the repo to local ci workspace
        uses: actions/checkout@v3

      - name: Make Custom Script Executable
        run: chmod +x ./script.sh

      - name: Run Patch Update
        run: ./script.sh increase-app-version patch

  # commit-and-build:
  #   name: Commit & Build
  #   # runs-on: [self-hosted, macOS] # using ubuntu latest version / or you can use a specific version
  #   runs-on: ubuntu-latest # using ubuntu latest version / or you can use a specific version
  #   needs: [increment-major, increment-minor, increment-patch]
  #   if: ${{ always() && contains(needs.*.result, 'success') && !(contains(needs.*.result, 'failure')) }}

  #   steps:
      #   - name: Commit Version Increment
      #     run: |
      #       git config --global user.name 'test user'
      #       git config --global user.email 'test-user@users.noreply.github.com'
      #       git commit -am "Increment android version to version 4.1.5"
      #       git --no-pager log --graph -10 --all --color --date=short --pretty=format:"%Cred%x09%h %Creset%ad%Cblue%d %Creset %s %C(bold)(%an)%Creset"
      #       git push origin HEAD:test-custom-script

      # - name: Generate App APK
      #   run: |
      #     cd android && ./gradlew assembleRelease --no-daemon

      # - name: Check Android folder build
      #   run: echo "$(ls android)"

      #       - uses: Tlaster/android-sign@v1.2.2
      #         name: Sign app APK
      #         with:
      #           releaseDirectory: |
      #             app/build/outputs/apk/release
      #             app/build/outputs/bundle/release
      #           signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
      #           output: build/release/signed
      #           alias: ${{ secrets.ANDROID_ALIAS }}
      #           keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
      #           keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
      #         env:
      #           BUILD_TOOLS_VERSION: "30.0.2"

      ## sign generated apk
      # - name: Sign APK
      #   id: sign_app
      #   uses: r0adkll/sign-android-release@v1
      #   with:
      #     releaseDirectory: android/app/build/outputs/apk/release
      #     signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
      #     alias: ${{ secrets.ANDROID_ALIAS }}
      #     keyStorePassword: ${{ secrets.ANDROID_KEY_STORE_PASSWORD }}
      #     keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}

      # - name: Check Android file build
      #   run: echo "$(ls android/app/build/outputs/apk/release)"
#       - name: Upload to Slack
#         run: 'echo testing a file > message.txt'
#       - uses: MeilCli/slack-upload-file@v2
#         with:
#           slack_token: ${{ secrets.SLACK_TOKEN }}
#           channels: '#automation'
# #           android/app/build/outputs/apk/release/app-release-signed.apk
#           file_path: 'android/app/build/outputs/apk/release/app-release.apk'
#           file_type: 'apk'
#           initial_comment: 'post by slack-upload-file'

# ## Distribute app to Firebase App Distribution for testing / use google play internal track if you have a google play account
# - name: upload artifact to Firebase App Distribution
#   uses: wzieba/Firebase-Distribution-Github-Action@v1
#   with:
#     appId: ${{secrets.ANDROID_FIREBASE_APP_ID}}
#     token: ${{secrets.ANDROID_FIREBASE_TOKEN}}
#     groups: testers
#     file: ${{steps.sign_app.outputs.signedReleaseFile}}
