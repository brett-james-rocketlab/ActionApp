name: IOS Build

on:
  workflow_dispatch:
  release:
    types: [published] # only run the workflow when a new release has been published

jobs:
  ios-build:
    name: IOS Production Build
    #runs-on: [macOS, self-hosted]
    runs-on: [self-hosted]
    defaults:
      run:
        working-directory: ios

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Restore node_modules from cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile --network-timeout 300000

      - name: Setup Ruby (bundle)
        uses: ruby/setup-ruby@v1
        with:
        # was 2.6
          ruby-version: 2.7.4
          bundler-cache: true

      - name: Restore Pods cache
        uses: actions/cache@v2
        with:
          path: |
            ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Pods
        #run: cd ios && pod install --repo-update && cd ..
        run: pod install --repo-update && cd ..

      - name: Build IOS App
        uses: yukiarrr/ios-build-action@v1.4.0
        with:
          project-path: ios/ActionApp.xcodeproj
          p12-base64: ${{ secrets.IOS_P12_BASE64 }}
          mobileprovision-base64: ${{ secrets.IOS_MOBILE_PROVISION_BASE64 }}
          code-signing-identity: 'ActionApp versioning test CI pipelines'
          team-id: ${{ secrets.IOS_TEAM_ID }}
          certificate-password: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          workspace-path: ios/ActionApp.xcworkspace
          scheme: ActionApp

      - name: Upload ipa to Slack
        run: 'echo testing a file > message.txt'
      - uses: MeilCli/slack-upload-file@v2
        with:
          slack_token: ${{ secrets.SLACK_TOKEN }}
          channels: '#automation'
#           android/app/build/outputs/apk/release/app-release-signed.apk
          file_path: 'android/app/build/outputs/apk/release/app-release.apk'
          file_type: 'apk'
          initial_comment: 'post by slack-upload-file'

#      - name: 'Upload app to TestFlight'
#        uses: apple-actions/upload-testflight-build@v1
#        with:
#          app-path: 'output.ipa'
#          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
#          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
#          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
